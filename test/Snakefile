__author__ = "Johannes Alneberg"
__license__ = "MIT"

WORKFLOW_DIR = os.path.join(os.getcwd(), "..")

configfile: "config.json"

import os

include: os.path.join(WORKFLOW_DIR, "rules/mapping/bowtie2.rules")
include: os.path.join(WORKFLOW_DIR, "rules/mapping/samfiles.rules")
include: os.path.join(WORKFLOW_DIR, "rules/quantification/rpkm.rules")

# Make sure the scripts are available in working dir
script_dir = os.path.join(WORKFLOW_DIR, "scripts")
for script in os.listdir(script_dir):
    if not os.path.exists(os.path.basename(script)):
        print("Creating symlink to {0}".format(script))
        os.symlink(os.path.join(script_dir, script), script)

rule prepare:
    params:
        testdir = os.getcwd()
    shell:
        """mkdir -p annotation/reference references samples mapping quantification
           ln -s {params.testdir}/test_data/references/assembly_v1.fna references/
           ln -s {params.testdir}/test_data/samples/*.fastq samples/
           ln -s {params.testdir}/test_data/annotation/reference/assembly_v1.gff annotation/reference/"""

rule all_from_mapping:
    input:
        expand("quantification/{assembly}/orf/{samples}/{samples}.rpkm",
            samples = ["120322", "120507"],
            assembly = "assembly_v1"),

rule clean_up:
    shell:
        """rm -r annotation references samples rpkm_for_orfs.py mapping
           rm -rf quantification"""
